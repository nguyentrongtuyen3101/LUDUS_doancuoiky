"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.merge = exports.glob = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const glob_1 = tslib_1.__importDefault(require("glob"));
const PREFIX = '//******** AUTO GENERATED FILE, DO NOT EDIT.  *********\n\n';
function glob(path) {
    return new Promise((resolve, reject) => {
        glob_1.default.glob(path, (error, matches) => {
            if (error) {
                return reject(error);
            }
            resolve(matches);
        });
    });
}
exports.glob = glob;
async function merge(baseFile, schemaFilePattern, outputFile, excludedFilePattern) {
    // const targetFiles = await glob(outputFile);
    // if (targetFiles.length !== 1) {
    //   throw new Error(`Cannot determine target file: ${targetFiles}`);
    // }
    const excludedFiles = await glob(excludedFilePattern);
    const candidateFiles = await glob(schemaFilePattern);
    const filesToMerge = candidateFiles.filter((file) => !excludedFiles.includes(file) && !file.endsWith(baseFile) && !file.endsWith(outputFile));
    let prismaFile = PREFIX + fs_1.default.readFileSync(baseFile, { encoding: 'utf8' });
    for (const file of filesToMerge) {
        prismaFile += `\n\n${fs_1.default.readFileSync(file, { encoding: 'utf8' })}`;
    }
    // Overwrite file
    fs_1.default.writeFileSync(outputFile, prismaFile, { encoding: 'utf8' });
}
exports.merge = merge;
