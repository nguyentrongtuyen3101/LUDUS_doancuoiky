generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User and related domain models
enum Role {
  Admin
  User
}

model User {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String
  lastName         String
  birthday         DateTime?
  gender           String?
  email            String        @unique
  password         String?
  role             Role
  externalId       String?
  provider         String?
  phoneNumber      String?
  isActive         Boolean       @default(false)
  addresses        Address[]
  wishlists        Wishlist[]
  cart             Cart?         @relation("UserToCart")
  orders           Order[]       @relation("UserToOrders")
  reviews          Review[]      @relation("UserToReviews")
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  fullName    String
  phoneNumber String
  addressLine String
  city        String
  country     String
  isDefault   Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
  orders      Order[] @relation("OrderToShippingAddress")
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  addedDate DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

// Catalog and Product domain models
model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  isActive      Boolean       @default(true)
  subcategories Subcategory[]
}

model Subcategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String    @db.ObjectId
  name        String
  description String?
  isActive    Boolean   @default(true)
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Product {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  subcategoryId   String           @db.ObjectId
  name            String
  description     String?
  price           Float
  discountedPrice Float?
  stockQuantity   Int
  imageUrl        String?
  createdAt       DateTime         @default(now())
  isActive        Boolean          @default(true)
  productCode     String           @unique
  subcategory     Subcategory      @relation(fields: [subcategoryId], references: [id])
  productVariants ProductVariant[]
  wishlists       Wishlist[]
  reviews         Review[]         @relation("ProductToReviews")
}

model ProductVariant {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  productId              String         @db.ObjectId
  sizeId                 String         @db.ObjectId
  colorId                String         @db.ObjectId
  stockQuantity          Int
  variantPrice           Float?
  variantDiscountedPrice Float?
  variantImageUrl        String?
  isActive               Boolean        @default(true)
  product                Product        @relation(fields: [productId], references: [id])
  size                   Size           @relation(fields: [sizeId], references: [id])
  color                  Color          @relation(fields: [colorId], references: [id])
  productImages          ProductImage[]
  cartDetails            CartDetail[]   @relation("CartDetailToProductVariant")
  buyNowItems            BuyNowItem[]   @relation("BuyNowItemToProductVariant")
  orderDetails           OrderDetail[]  @relation("OrderDetailToProductVariant")
}

model ProductImage {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  productVariantId String         @db.ObjectId
  imageUrl         String
  isMain           Boolean        @default(false)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Size {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  isActive        Boolean          @default(true)
  productVariants ProductVariant[]
}

model Color {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  hexCode         String?
  description     String?
  isActive        Boolean          @default(true)
  productVariants ProductVariant[]
}

// cart and Raorder domain models
model Cart {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @unique @db.ObjectId
  user        User         @relation("UserToCart", fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  cartDetails CartDetail[] @relation("CartToCartDetails")
}

model CartDetail {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  cartId           String         @db.ObjectId
  cart             Cart           @relation("CartToCartDetails", fields: [cartId], references: [id])
  productVariantId String         @db.ObjectId
  productVariant   ProductVariant @relation("CartDetailToProductVariant", fields: [productVariantId], references: [id])
  quantity         Int
  unitPrice        Float
}

model BuyNowItem {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  productVariantId String         @db.ObjectId
  productVariant   ProductVariant @relation("BuyNowItemToProductVariant", fields: [productVariantId], references: [id])
  quantity         Int
  unitPrice        Float
  productName      String
  variantImageUrl  String
  sizeName         String
  colorName        String
}

model Order {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  user              User          @relation("UserToOrders", fields: [userId], references: [id])
  orderDate         DateTime      @default(now())
  totalAmount       Float
  status            OrderStatus
  shippingAddressId String        @db.ObjectId
  shippingAddress   Address       @relation("OrderToShippingAddress", fields: [shippingAddressId], references: [id])
  shippingCost      Float
  paymentMethodId   String        @db.ObjectId
  paymentMethod     PaymentMethod @relation("PaymentMethodToOrders", fields: [paymentMethodId], references: [id])
  couponId          String?       @unique @db.ObjectId
  coupon            Coupon?       @relation("CouponToOrder", fields: [couponId], references: [id])
  discountApplied   Float         @default(0)
  notes             String?
  orderDetails      OrderDetail[] @relation("OrderToOrderDetails")
  payments          Payment?      @relation("OrderToPayment")
}

model OrderDetail {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId          String         @db.ObjectId
  order            Order          @relation("OrderToOrderDetails", fields: [orderId], references: [id])
  productVariantId String         @db.ObjectId
  productVariant   ProductVariant @relation("OrderDetailToProductVariant", fields: [productVariantId], references: [id])
  quantity         Int
  unitPrice        Float
  subtotal         Float
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  Delivered
  Cancelled
}

// chat domain models
model ChatMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content    String
  filePath   String?
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)
}

//payment domain models
model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String        @unique @db.ObjectId
  order           Order?        @relation("OrderToPayment", fields: [orderId], references: [id])
  paymentMethodId String        @db.ObjectId
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  amount          Float
  paymentDate     DateTime      @default(now())
  status          String
  transactionId   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PaymentMethod {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  isActive    Boolean   @default(true)
  payments    Payment[]
  order       Order[]   @relation("PaymentMethodToOrders")
}

model Coupon {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  code               String   @unique
  discountAmount     Float?
  discountPercentage Float?
  startDate          DateTime
  endDate            DateTime
  maxUsage           Int
  usedCount          Int      @default(0)
  isActive           Boolean  @default(true)
  order              Order?   @relation("CouponToOrder")
}

// Review domain model
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation("ProductToReviews", fields: [productId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation("UserToReviews", fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

//token domain model
model VerifiToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}
